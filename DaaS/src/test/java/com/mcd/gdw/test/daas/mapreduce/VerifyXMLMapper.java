package com.mcd.gdw.test.daas.mapreduce;

import java.io.IOException;
import java.io.StringReader;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.lib.input.FileSplit;
import org.w3c.dom.Document;
import org.xml.sax.ErrorHandler;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.SAXParseException;

import com.mcd.gdw.daas.DaaSConstants;

public class VerifyXMLMapper extends Mapper<LongWritable, Text, Text, Text> {

	private DocumentBuilderFactory docFactory = null;
	private DocumentBuilder docBuilder = null;
	private InputSource xmlSource = null;
	@SuppressWarnings("unused")
	private Document doc = null;
	private StringReader strReader = null;

	private FileSplit fileSplit = null;
	private String fileName = "";

	private String[] parts = null;
	
	private StringBuffer outKey = new StringBuffer();
	private StringBuffer outValue = new StringBuffer();
	
	private Text mapKey = new Text();
	private Text mapValue = new Text();

	private boolean parseException;
	private String parseMsg;

	private ErrorHandler handler = new ErrorHandler() {
	    public void warning(SAXParseException e) throws SAXException {
	    	parseException = true;
	    	parseMsg = "[warning] "+e.getMessage();
	    }
	    public void error(SAXParseException e) throws SAXException {
	    	parseException = true;
	    	parseMsg = "[error] "+e.getMessage();
	    }
	    public void fatalError(SAXParseException e) throws SAXException {
	    	parseException = true;
	    	parseMsg = "[fatal error] "+e.getMessage();
	    }
	};

	private String fileSubType;
	private String terrCd;
	private String posBusnDt;
	private String lgcyLclRfrDefCd;
	//private String mcdGbalLcatIdNu;
	
	//private static final String
	private static final String
	
	@Override
	public void setup(Context context) {
	      
        fileSplit = (FileSplit) context.getInputSplit();
        fileName = fileSplit.getPath().getName();

        /*
        try {
			docFactory = DocumentBuilderFactory.newInstance();
			docBuilder = docFactory.newDocumentBuilder();
			docBuilder.setErrorHandler(handler);

        } catch (Exception ex) {
			System.err.println("Error in initializing VerifyXMLMapper:");
			System.err.println(ex.toString());
			System.exit(8);
		}
		*/
        
	}
	
	@Override
	public void map(LongWritable key, Text value,Context context) throws IOException, InterruptedException {

		try {
			
			parseException = false;
			
			parts = value.toString().split("\t");

			fileSubType = parts[DaaSConstants.XML_REC_FILE_TYPE_POS];
			terrCd = String.format("%03d", Integer.parseInt(parts[DaaSConstants.XML_REC_TERR_CD_POS]));
			lgcyLclRfrDefCd = parts[DaaSConstants.XML_REC_LGCY_LCL_RFR_DEF_CD_POS];
			//mcdGbalLcatIdNu = parts[DaaSConstants.XML_REC_MCD_GBAL_LCAT_ID_NU_POS];
			posBusnDt = parts[DaaSConstants.XML_REC_POS_BUSN_DT_POS].substring(0, 4) + "-" + parts[DaaSConstants.XML_REC_POS_BUSN_DT_POS].substring(4, 6) + "-" + parts[DaaSConstants.XML_REC_POS_BUSN_DT_POS].substring(6, 8);

			//strReader  = new StringReader(parts[DaaSConstants.XML_REC_XML_TEXT_POS]);
			//xmlSource = new InputSource(strReader);
			//doc = docBuilder.parse(xmlSource);
		} catch (Exception ex) { 
			
			if ( !parseException ) {
				System.err.println("Error occured in VerifyXMLMapper.map:");
				ex.printStackTrace(System.err);
				System.exit(8);
			}
		}
		
		if ( LIC_LIST.contains("@"+lgcyLclRfrDefCd)  ) {
			outKey.setLength(0);
			outKey.append(terrCd);
			outKey.append("\t");
			outKey.append(lgcyLclRfrDefCd);
			//outKey.append("\t");
			//outKey.append(mcdGbalLcatIdNu);
			outKey.append("\t");
			outKey.append(posBusnDt);
			outKey.append("\t");
			outKey.append(fileSubType);
			
			mapKey.clear();
			mapKey.set(outKey.toString());

			if ( parseException ) {
				outValue.setLength(0);
				outValue.append("1");
				outValue.append("\t");
				outValue.append(fileName);
				outValue.append("\t");
				outValue.append(parseMsg);
				
				context.getCounter("DaaS","Error-" + fileSubType).increment(1);
				
			} else {
				outValue.setLength(0);
				outValue.append("0");
				outValue.append("\t");
				outValue.append("\t");
				
				context.getCounter("DaaS","OK-" + fileSubType).increment(1);
			}

			mapValue.clear();
			mapValue.set(outValue.toString());

			context.write(mapKey, mapValue);	
		}

	}
}
